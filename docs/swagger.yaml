basePath: /
definitions:
  auth_data.AuthRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  candidate_data.Candidate:
    properties:
      age:
        type: integer
      education:
        type: string
      id:
        type: integer
      name:
        type: string
      party:
        type: string
      photo:
        type: string
      region:
        type: string
      type:
        $ref: '#/definitions/candidate_data.CandidateType'
      votes:
        type: integer
      votingDeadline:
        example: "2025-05-10T23:59:00+05:00"
        type: string
      votingStart:
        example: "2025-05-10T23:59:00+05:00"
        type: string
    type: object
  candidate_data.CandidateType:
    enum:
    - presidential
    - deputy
    - manager
    type: string
    x-enum-varnames:
    - Presidential
    - Deputy
    - Manager
  candidate_data.VoteRequest:
    properties:
      candidate_id:
        type: integer
      candidate_type:
        enum:
        - presidential
        - deputy
        - manager
        example: presidential, deputy, manager
        type: string
    type: object
  petition_data.Petition:
    properties:
      description:
        type: string
      goal:
        type: integer
      photo:
        type: string
      title:
        type: string
      votingDeadline:
        example: "2025-05-10T23:59:00+05:00"
        type: string
    type: object
  petition_data.PetitionVoteRequest:
    properties:
      petition_id:
        type: integer
      vote_type:
        allOf:
        - $ref: '#/definitions/petition_data.VoteType'
        description: 'Enum values: favor, against'
        example: favor, against
    type: object
  petition_data.VoteType:
    enum:
    - favor
    - against
    type: string
    x-enum-varnames:
    - Favor
    - Against
host: localhost:8080
info:
  contact:
    email: support@dauys.com
    name: API Support
  description: This is the backend API for the Online Election system.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://dayus.kz
  title: Online Election Vote
  version: "1.0"
paths:
  /candidates:
    get:
      parameters:
      - description: Candidate Type
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of candidates
          schema:
            items:
              $ref: '#/definitions/candidate_data.Candidate'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get candidates by type
      tags:
      - Candidates
  /candidates/:
    get:
      parameters:
      - description: Candidate Type
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of candidates
          schema:
            items:
              $ref: '#/definitions/candidate_data.Candidate'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get candidates by type by page
      tags:
      - Candidates
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Username and Password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth_data.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Login and get access tokens
      tags:
      - Auth
  /petition/all:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/petition_data.Petition'
            type: array
      security:
      - BearerAuth: []
      summary: Get all petitions
      tags:
      - Petition
  /petition/all/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/petition_data.Petition'
            type: array
      security:
      - BearerAuth: []
      summary: Get petitions by page
      tags:
      - Petition
  /petition/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Petition Data
        in: body
        name: petition
        required: true
        schema:
          $ref: '#/definitions/petition_data.Petition'
      produces:
      - application/json
      responses:
        "200":
          description: Petition created
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a petition
      tags:
      - Petition
  /petition/vote:
    post:
      consumes:
      - application/json
      parameters:
      - description: Petition petition data
        in: body
        name: petitionVote
        required: true
        schema:
          $ref: '#/definitions/petition_data.PetitionVoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Voted on petition
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Vote on a petition
      tags:
      - Petition
  /register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Username and Password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth_data.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
  /vote:
    post:
      consumes:
      - application/json
      parameters:
      - description: Candidate vote data
        in: body
        name: candidate
        required: true
        schema:
          $ref: '#/definitions/candidate_data.VoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Vote successful
          schema:
            type: string
        "400":
          description: Invalid request format or duplicate petition
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Vote for a candidate
      tags:
      - Candidates
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
